##### Figure 3.1 Code

library(ggplot2)
ChickWeight$Chick = as.factor(ChickWeight$Chick)
#below code plots Figure 3.1
ggplot(data=ChickWeight, aes(x=Time, y=weight, col=Chick))+
  geom_point(size=1.2, alpha=0.8)+
  geom_line(aes(y=predict(lm(weight~Time, data=ChickWeight)), x=Time),col='red',
  size=1, alpha=0.8)+
  labs(x='Time (Days)', y='Weight (g)')+
  theme(legend.position='theme',
  axis.title = element_text(size=25), axis.text = element_text(size=25))


## Code 3.2

library(lme4)
# Random intercept model fitted to ChickWeight
fitcwri = lmer(weight ~ Time + Diet + (1|Chick), data=ChickWeight)

# Obtaining all statistics
summary(fitcwri)

# Plotting the model

ggplot(data=ChickWeight, aes(x=Time, y=weight, col=Chick))+
  geom_point(size=1.2, alpha=0.8)+
  geom_line(aes(y=predict(fitcwri, ChickWeight), x=Time), size=1, alpha=0.8)+
  labs(x = 'Time (Days)', y='Weight (g)', col = 'Chick')+
  theme(axis.title=element_text(size=25), axis.text=element_text(size=25), 
  legend.key.height = unit(1, 'cm'), legend.title = element_text(size=25))


## Code 3.3

library(lme4)
# Random intercept and slope model fitted to ChickWeight
fitcwrs = lmer(weight ~ Time + Diet + (Time|Chick), data=ChickWeight)

# Obtaining model statistics
summary(fitcwrs)

# Plotting the model

ggplot(data=ChickWeight, aes(x=Time, y=weight, col=Chick))+
  geom_point(size=1.2, alpha=0.8)+
  geom_line(aes(y=predict(fitcwrs, ChickWeight), x=Time), size=1, alpha=0.8)+
  labs(x = 'Time (Days)', y='Weight (g)', col = 'Chick')+
  theme(axis.title=element_text(size=25), axis.text=element_text(size=25), 
  legend.key.height = unit(1, 'cm'), legend.title = element_text(size=25))


## Figure 3.4 Code

require(sjPlot)
library(lme4)
install.packages('TMB')
fitcwri = lmer(weight ~ Time + Diet + (1|Chick), data=ChickWeight)
fitcwrs = lmer(weight ~ Time + Diet + (Time|Chick), data=ChickWeight)
# Setting aesthetic requirements

set_theme(title.size = 1.4,axis.title.size = 1.2, axis.textsize.x = 1.2, title.align = 'center')

# Creating the plots
r1 = plot_model(fitcwri, type='re', transform=NULL, show.p=TRUE, 
title='Random Effects for Random Intercept Model')
r2 = plot_model(fitcwrs, type='re', transform=NULL, show.p=TRUE, 
title='Random Effects for Random Intercept and Slope Model')

# Print the plot
gridExtra::grid.arrange(r1,r2, nrow=1)


## Table 3.1 Code

library(lme4)
library(nlme)

# Function to calculate 'Improved BIC'

BICimp = function(model, p){
  corr = cov2cor(vcov(model))
  ne = sum(solve(corr))
  loglik = summary(model)$logLik
  return((-2*loglik) + (p*log(ne)))
}

# Function to calculate 'Hybrid BIC'

BIChybrid = function(model, r, f){   
  loglik = summary(model)$logLik
  N = dim(unique(summary(model)$groups))[1]
  n = dim(summary(model)$groups)[1]
  return((-2*loglik)+(r*log(N))+(f*log(n)))
}

# Model 1
fit.t = lme(fixed = weight ~ Time, data=ChickWeight, random=~1|Chick ) 

# BICs for Model 1
bic1 = BIChybrid(fit.t, 2,3)   ## 5646.301
bicimp1 = BIC(fit.t) ## 5644.822
bichyb1 = BICimp(fit.t, 5) ## 5625.605

# Model 2
fit.td = lme(fixed = weight ~ Time + Diet, data=ChickWeight, random=~1|Chick )

# BICs for Model 2
bic2 = BIC(fit.td) ## 5628.46
bicimp2 = BICimp(fit.td, 8) ## 5607.036
bichyb2 = BIChybrid(fit.td, 2, 6) ##5629.986

# Model 3
fit.rst = lme(fixed = weight~ Time, data=ChickWeight, random=~Time|Chick)

#BICs for Model 3
bic3 = BIC(fit.rst) ##4865.636
bicimp3 = BICimp(fit.rst, 7) ##4846.7
bichyb3 = BIChybrid(fit.rst, 4,3)  ##4862.226

# Model 4
fit.rstd = lme(fixed= weight~Time + Diet, data=ChickWeight, random=~Time|Chick)

#BICs for Model 4
bic4 = BIC(fit.rstd)  ## 4860.912
bicimp4 = BICimp(fit.rstd, 10) ## 4841.654
bichyb4 = BIChybrid(fit.rstd, 4,6) ##4857.559
